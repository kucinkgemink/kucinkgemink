# GUI Klasifikasi Kualitas Udara menggunakan KNN

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import requests
import time
import joblib
import csv
import os
import json
from datetime import datetime
from threading import Thread
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import webbrowser
import sys  # <-- tambahan

# helper agar file bisa dibaca di mode .py dan .exe (PyInstaller)
def resource_path(relative_path):
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)

# Firebase config
DATABASE_URL = "https://projekakhir-cff8d-default-rtdb.asia-southeast1.firebasedatabase.app"

# File konfigurasi
csv_filename = "hasil_prediksi_udara.csv"
kalibrasi_file = "kalibrasi_udara.json"
model_config_file = "model_config_udara.json"

# Default load (pakai resource_path biar aman di exe)
model = joblib.load(resource_path('knn_model.joblib'))
encoder = joblib.load(resource_path('label_encoder.joblib'))
scaler = joblib.load(resource_path('scaler.joblib'))

if not os.path.exists(csv_filename):
    with open(csv_filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Timestamp", "CO", "CO2", "PM2.5", "PM10", "Kategori"])

def load_kalibrasi():
    if os.path.exists(kalibrasi_file):
        with open(kalibrasi_file, "r") as f:
            return json.load(f)
    return {"CO": 0, "CO2": 0, "PM25": 0, "PM10": 0}

def save_kalibrasi(kalibrasi_data):
    with open(kalibrasi_file, "w") as f:
        json.dump(kalibrasi_data, f)

def load_model_config():
    if os.path.exists(model_config_file):
        with open(model_config_file, "r") as f:
            return json.load(f)
    return {}

def save_model_config(config):
    with open(model_config_file, "w") as f:
        json.dump(config, f)

def get_sensor_data():
    try:
        url = f"{DATABASE_URL}/.json"
        response = requests.get(url)

        if response.status_code == 200:
            data = response.json()
            if not data:
                return None

            sensor_data = {
                "CO": data.get("mq7", {}).get("ppm", None),
                "CO2": data.get("mq135", {}).get("ppm", None),
                "PM25": data.get("sds011", {}).get("pm25", None),
                "PM10": data.get("sds011", {}).get("pm10", None),
            }
            return sensor_data
        else:
            print("Gagal ambil data:", response.status_code)
            return None
    except Exception as e:
        print("Error:", e)
        return None

    except Exception as e:
        print("Error:", e)
        return None

data_history = []
last_data = {"CO": None, "CO2": None, "PM25": None, "PM10": None}

class Dashboard:
    def __init__(self, root):
        self.root = root
        self.root.title("Klasifikasi Kualitas Udara (KNN)")
        self.root.configure(bg="#f7f7f7")

        self.kalibrasi_data = load_kalibrasi()
        self.load_custom_models()

        style = ttk.Style()
        style.configure("TLabel", font=("Helvetica", 16), background="#f7f7f7")
        style.configure("Header.TLabel", font=("Helvetica", 26, "bold"))

        menu_bar = tk.Menu(root)
        root.config(menu=menu_bar)

        file_menu = tk.Menu(menu_bar, tearoff=0)
        menu_bar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Download CSV", command=self.download_csv)
        file_menu.add_command(label="Kalibrasi Sensor", command=self.kalibrasi_sensor)
        file_menu.add_command(label="Pilih File Model", command=self.pilih_file_model)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=root.quit)

        self.header = ttk.Label(root, text="Klasifikasi Kualitas Udara (KNN)", style="Header.TLabel")
        self.header.pack(pady=20)

        self.frame = tk.Frame(root, bg="#f7f7f7")
        self.frame.pack()

        self.labels = {}
        for idx, nama in enumerate(["CO", "CO2", "PM2.5", "PM10", "Kategori"]):
            self.labels[nama] = ttk.Label(self.frame, text=f"{nama}: -")
            self.labels[nama].grid(row=0, column=idx, padx=10, pady=10)

        self.canvas_frame = tk.Frame(root, bg="#f7f7f7")
        self.canvas_frame.pack(pady=20)

        self.fig, self.ax = plt.subplots(figsize=(10, 4))
        self.ax.set_title("Tren Sensor Udara")
        self.ax.set_ylabel("Nilai")
        self.ax.set_xlabel("Timestamp")
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.canvas_frame)
        self.canvas.get_tk_widget().pack()

        self.update_thread = Thread(target=self.update_loop)
        self.update_thread.daemon = True
        self.update_thread.start()

    def download_csv(self):
        if os.path.exists(csv_filename):
            webbrowser.open(csv_filename)
        else:
            messagebox.showerror("Error", "File CSV tidak ditemukan!")

    def kalibrasi_sensor(self):
        data = get_sensor_data()
        if data:
            popup = tk.Toplevel(self.root)
            popup.title("Kalibrasi Sensor Udara")

            entries = {}
            for key in ["CO", "CO2", "PM25", "PM10"]:
                current = data.get(key, None)
                if current is None:
                    continue
                ttk.Label(popup, text=f"Target {key} (saat ini {current}):").pack(pady=3)
                entry = ttk.Entry(popup)
                entry.pack()
                entries[key] = (entry, current)

            def simpan():
                try:
                    kal = {k: float(e.get()) - c for k, (e, c) in entries.items()}
                    save_kalibrasi(kal)
                    self.kalibrasi_data = kal
                    messagebox.showinfo("Sukses", "Kalibrasi disimpan.")
                    popup.destroy()
                except:
                    messagebox.showerror("Error", "Input harus angka.")

            ttk.Button(popup, text="Simpan Kalibrasi", command=simpan).pack(pady=10)

    def pilih_file_model(self):
        popup = tk.Toplevel(self.root)
        popup.title("Pilih File Model")
        paths = load_model_config()

        def browse(label, key):
            path = filedialog.askopenfilename(filetypes=[("Joblib", "*.joblib")])
            if path:
                label.config(text=path)
                paths[key] = path

        for key in ["model_path", "scaler_path", "encoder_path"]:
            ttk.Label(popup, text=key.replace("_path", "").title()).pack()
            lbl = ttk.Label(popup, text=paths.get(key, "-"))
            lbl.pack()
            ttk.Button(popup, text="Browse", command=lambda l=lbl, k=key: browse(l, k)).pack()

        def simpan():
            save_model_config(paths)
            self.load_custom_models()
            popup.destroy()

        ttk.Button(popup, text="Simpan dan Terapkan", command=simpan).pack(pady=10)

    def load_custom_models(self):
        global model, scaler, encoder
        config = load_model_config()
        try:
            if os.path.exists(config.get("model_path", "")):
                model = joblib.load(config["model_path"])
            if os.path.exists(config.get("scaler_path", "")):
                scaler = joblib.load(config["scaler_path"])
            if os.path.exists(config.get("encoder_path", "")):
                encoder = joblib.load(config["encoder_path"])
        except Exception as e:
            messagebox.showerror("Error", f"Gagal load model: {e}")

    def update_loop(self):
        global last_data
        while True:
            data = get_sensor_data()
            if data:
                values = {k: v for k, v in data.items() if v is not None}

                if values and any(values[k] != last_data.get(k) for k in values):
                    kal = self.kalibrasi_data
                    kalibrated = [
                        values.get("CO", 0) + kal.get("CO", 0),
                        values.get("CO2", 0) + kal.get("CO2", 0),
                        values.get("PM25", 0) + kal.get("PM25", 0),
                        values.get("PM10", 0) + kal.get("PM10", 0),
                    ]

                    # Prediksi KNN
                    data_scaled = scaler.transform([kalibrated])
                    y_pred = model.predict(data_scaled)
                    label = encoder.inverse_transform(y_pred)[0]

                    # Simpan ke history & CSV
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    row = [timestamp] + kalibrated + [label]
                    data_history.append(row)

                    with open(csv_filename, 'a', newline='') as f:
                        csv.writer(f).writerow(row)

                    # Update GUI
                    for i, k in enumerate(["CO", "CO2", "PM2.5", "PM10"]):
                        self.labels[k].config(text=f"{k}: {kalibrated[i]:.2f}")

                    self.labels["Kategori"].config(text=f"Kategori: {label}")

                    self.plot_data()
                    last_data = values
            time.sleep(2)

    def plot_data(self):
        if len(data_history) > 1:
            timestamps = [d[0] for d in data_history[-10:]]
            sensor_data = list(zip(*data_history[-10:]))[1:5]  # CO, CO2, PM25, PM10
            self.ax.clear()
            for i, label in enumerate(["CO", "CO2", "PM2.5", "PM10"]):
                self.ax.plot(timestamps, [float(v) for v in sensor_data[i]], label=label)
            self.ax.legend()
            self.ax.set_title("Tren Sensor Udara")
            self.ax.set_xlabel("Timestamp")
            self.ax.set_ylabel("Nilai")
            self.fig.tight_layout()
            self.canvas.draw()

if __name__ == "__main__":
    root = tk.Tk()
    app = Dashboard(root)
    root.mainloop()
